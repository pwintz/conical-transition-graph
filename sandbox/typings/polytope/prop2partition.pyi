"""
This type stub file was generated by pyright.
"""

"""Proposition preserving partition module."""
logger = ...
_hl = ...
def find_adjacent_regions(partition): # -> lil_matrix:
    """Return region pairs that are spatially adjacent.

    @type partition: iterable container of L{Region}

    @rtype: lil_matrix
    """
    ...

class Partition:
    """Partition of a set.

    A C{Partition} is an iterable container of sets
    over C{Partition.set} and these must implement the methods:

        - union, __add__
        - difference
        - intersection
        - __le__

    so the builtin class C{set} can be used for discrete sets,
    or custom classes (e.g. polytopes) can be used for sets
    equipped with more structure.

    To utilize additional structure, see L{MetricPartition}.
    """
    def __init__(self, domain=...) -> None:
        """Partition over C{domain}.

        C{domain} is used to avoid conflicts with
        the python builtin set function.
        """
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self):
        ...
    
    def __getitem__(self, key):
        ...
    
    def is_partition(self): # -> bool:
        """Return True if Regions are pairwise disjoint and cover domain.
        """
        ...
    
    def is_cover(self): # -> bool:
        """Return True if Regions cover domain
        """
        ...
    
    def are_disjoint(self, check_all=..., fname=...): # -> bool:
        """Return True if all Regions are disjoint.

        Print:

            - the offending Regions and their
            - their intersection (mean) volume ratio
            - their difference (mean) volume ratio

        Optionally save numbered figures of:

            - offending Regions
            - their intersection
            - their difference

        @param check_all: don't return when first offending regions found,
            continue and check all pairs
        @type check_all: bool

        @param fname: path prefix where to save the debugging figures
            By default no figures are saved.
        @type fname: str
        """
        ...
    
    def refines(self, other): # -> bool:
        """Return True if each element is a subset of other.

        @type other: PropPreservingPartition
        """
        ...
    
    def preserves(self, other): # -> bool:
        """Return True if it refines closure of C{other} under complement.

        Closure under complement is the union of C{other}
        with the collection of complements of its elements.

        This method checks the annotation of elements in C{self}
        with elements fro C{other}.
        """
        ...
    


class MetricPartition(Partition):
    """Partition of a metric space.

    Includes adjacency information which abstracts
    the topology induced by the metric.

    Two subsets in the partition are called adjacent
    if the intersection of their closure is non-empty.

    If the space is also a measure space,
    then volume information is used for diagnostic purposes.
    """
    def compute_adj(self): # -> bool:
        """Update the adjacency matrix by checking all region pairs.

        Uses L{polytope.is_adjacent}.
        """
        ...
    


