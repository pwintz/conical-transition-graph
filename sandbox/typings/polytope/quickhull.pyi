"""
This type stub file was generated by pyright.
"""

r"""Implementation of the Quickhull algorithm for computing convex hulls.

Reference
=========

\cite{Barber96toms}
"""
class Facet:
    """Face of dimension n-1 of n-dimensional polyhedron.

    A class describing a facet (n-1 dimensional face) of an
    n dimensional polyhedron with the following fields:
    N.B. Polyhedron is assumed to contain the origin
    (inside and outside are defined accordingly)

      - `outside`: a list of points outside the facet
      - `vertices`: the vertices of the facet in a n*n matrix where
        each row denotes a vertex
      - `neighbors`: a list of other facets with which the facet
        shares n-1 vertices
      - `normal`: a normalized vector perpendicular to the facet,
        pointing "out"
      - `distance`: the normal distance of the facet from origo
    """
    def __init__(self, points) -> None:
        ...
    
    def get_furthest(self):
        """Return point outside the furthest away from the facet."""
        ...
    


class Outside_point:
    """Point coordinates and distance to facet.

    The distance is between the point and the facet that
    the point is assigned to.
    """
    def __init__(self, coordinates, distance) -> None:
        ...
    


def distance(p, fac1):
    """Calculate the distance from a facet to a point."""
    ...

def is_neighbor(fac1, fac2, abs_tol=...): # -> Any:
    """Determine if two facets share d-1 vertices."""
    ...

def quickhull(POINTS, abs_tol=...):
    """Compute the convex hull of a set of points.

    @param POINTS: a n*d np array where each row denotes a point

    @return: A,b,vertices: `A` and `b describing the convex hull
        polytope as A x <= b (H-representation). `vertices is a list
        of all the points in the convex hull (V-representation).
    """
    ...

